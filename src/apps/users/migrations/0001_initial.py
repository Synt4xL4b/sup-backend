# Generated by Django 5.1 on 2024-09-04 11:24

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Permissions",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы.",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="Название",
                    ),
                ),
                ("code", models.IntegerField(verbose_name="Код")),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="Описание",
                    ),
                ),
            ],
            options={
                "verbose_name": "право",
                "verbose_name_plural": "права",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="Role",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Введите название роли до 20 символов(допускаются только буквы кириллицы и латиницы.)",
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы.",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="Название",
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        help_text="Введите цвет в формате 6 цифр.",
                        max_length=6,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_color",
                                message="Цвет должен быть в формате #RRGGBB.",
                                regex="^#[0-9A-Fa-f]{6}$",
                            )
                        ],
                        verbose_name="Цвет",
                    ),
                ),
            ],
            options={
                "verbose_name": "Роль",
                "verbose_name_plural": "Роли",
                "ordering": ["-id"],
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "password",
                    models.CharField(max_length=128, verbose_name="password"),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы.",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="Имя",
                    ),
                ),
                (
                    "surname",
                    models.CharField(
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы латиницы и кириллицы.",
                                regex="^[a-zA-Zа-яА-Я\\s]*$",
                            )
                        ],
                        verbose_name="Фамилия",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются буквы латиницы, цифры и спец. символы. Не допускается пробел.",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="Email",
                    ),
                ),
                (
                    "tg_name",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются только буквы, цифры и спец.символы.",
                                regex="^[a-zA-Zа-яА-Я0-9._%+-]+$",
                            )
                        ],
                        verbose_name="TG Имя",
                    ),
                ),
                (
                    "tg_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются буквы латиницы, цифры и спец. символы. Не допускается пробел.",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="TG Ник",
                    ),
                ),
                (
                    "google_meet_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются буквы латиницы, цифры и спец. символы. Не допускается пробел.",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="GoogleMeet Ник",
                    ),
                ),
                (
                    "gitlab_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются буквы латиницы, цифры и спец. символы. Не допускается пробел.",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="GitLab Ник",
                    ),
                ),
                (
                    "github_nickname",
                    models.CharField(
                        max_length=50,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_name",
                                message="Допускаются буквы латиницы, цифры и спец. символы. Не допускается пробел.",
                                regex="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$",
                            )
                        ],
                        verbose_name="GitHub Ник",
                    ),
                ),
                (
                    "avatar",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="avatars/",
                        verbose_name="Аватар",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Активный статус",
                    ),
                ),
                (
                    "is_admin",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        null=True,
                        verbose_name="Статус администратора",
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False, verbose_name="Суперпользователь"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False, verbose_name="Персонал"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "permissions",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="users.permissions",
                        verbose_name="Права",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.role",
                        verbose_name="Роль",
                    ),
                ),
            ],
            options={
                "verbose_name": "пользователь",
                "verbose_name_plural": "пользователи",
                "ordering": ["-id"],
            },
        ),
    ]
